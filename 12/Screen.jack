// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
 class Screen {
    static Array screen;
    static boolean cur_colour;
    static int white_pixel;
    static int black_pixel;
    static boolean white;
    static boolean black;
    
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let white = false;
        let black = true;
        let white_pixel = 0;
        let black_pixel = 1;
        let cur_colour = black;
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = white;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let cur_colour = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;
        let address = (y*32) + (x/16);
        let mask = Math.twoToThe(x & 15);

        if(cur_colour) {
            let screen[address] = screen[address] | mask;
        } else {
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int temp;
        // Make sure x1 <= x2
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
        }
        else {if (dy = 0) {
            do Screen.drawHorizontalLine(x1, x2, y1);
        } else {
            do Screen.drawDiagonalLine(x1, y1, x2, y2, dx, dy);
        }}
        return;
    }
    
    function void drawDiagonalLine(int x1, int y1, int x2, int y2, int dx, int dy) {
        var int a, b;
        var int adyMinusbdx;
        var int y_incr;

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        
        if (dy < 0) {
            let y_incr = -1;
        } else {
            let y_incr = 1;
        }
        while (~(a > dx) & (((y_incr = 1) & ~(b > dy)) | ((y_incr = -1) & ~(b < dy)))) {
            do Screen.drawPixel( x1+a, y1+b );
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy*y_incr);
            } else {
                let b = b + y_incr;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    function void drawVerticalLine( int x, int y1, int y2 ) {
        var int temp;
        // Make sure y1 <= y2
        if( y1 > y2 ) {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        while( ~(y1 > y2) ) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }
    
    function void drawHorizontalLine( int x1, int x2, int y ) {
        var int start_addr, end_addr;
        var int x1mod16, x2mod16;
        
        let x1mod16 = x1 & 15;
        let x2mod16 = x2 & 15;
        let start_addr = (y*32) + (x1/16);
        let end_addr = (y*32) + (x2/16) + (x2mod16=0);

        if (start_addr = end_addr) {   // line starts and ends within the same screen address
            do Screen.draw_short_horizontal_line(x1, x2, y);
        }
        else { 
            if (~(x1mod16 = 0)) {      // Draw the short start of the line
                let start_addr = start_addr + 1;
                do Screen.draw_short_horizontal_line(x1, x1+16-x1mod16, y);
            }
            if (~(x2mod16 = 0)) {      // Draw the short end of the line
                let end_addr = end_addr - 1;
                do Screen.draw_short_horizontal_line(x2-x2mod16, x2, y);
            }
            while (~(start_addr > end_addr)) {     // Draw the middle of the line
                let screen[start_addr] = cur_colour;
                let start_addr = start_addr + 1;
            }
        }
        return;
    }
    
    function void draw_short_horizontal_line( int x1, int x2, int y ) {
        while (~(x1 > x2)) {
            do Screen.drawPixel( x1, y );
            let x1 = x1 + 1;
        }
        return;
    }
    
    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int dx, dy;
        var int r_squared;
        let dy = 0;
        let r_squared = r*r;
        while (~(dy > r)) {
            let dx = Math.sqrt(r_squared-(dy*dy));
            do Screen.drawHorizontalLine(cx-dx, cx+dx, cy+dy);
            do Screen.drawHorizontalLine(cx-dx, cx+dx, cy-dy);
            let dy = dy + 1;
        }
        return;
    }
}