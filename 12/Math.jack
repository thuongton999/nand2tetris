// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bits;
    /** Initializes the library. */
    function void init() {
        let bits = Array.new(16);
        let bits[0] = 1;            // 0000 0000 0000 0001
        let bits[1] = 2;            // 0000 0000 0000 0010
        let bits[2] = 4;            // 0000 0000 0000 0100
        let bits[3] = 8;            // 0000 0000 0000 1000
        let bits[4] = 16;           // 0000 0000 0001 0000
        let bits[5] = 32;           // 0000 0000 0010 0000
        let bits[6] = 64;           // 0000 0000 0100 0000
        let bits[7] = 128;          // 0000 0000 1000 0000
        let bits[8] = 256;          // 0000 0001 0000 0000
        let bits[9] = 512;          // 0000 0010 0000 0000
        let bits[10] = 1024;        // 0000 0100 0000 0000
        let bits[11] = 2048;        // 0000 1000 0000 0000
        let bits[12] = 4096;        // 0001 0000 0000 0000
        let bits[13] = 8192;        // 0010 0000 0000 0000
        let bits[14] = 16384;       // 0100 0000 0000 0000
        let bits[15] = 16384+16384; // 1000 0000 0000 0000
        return;
    }

    function boolean bit(int x, int i) {
        return ~((x & bits[i]) = 0);
    }

    function int twoToThe(int n) {
        return bits[n];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) { return -x; }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum, shifted_x;
        let sum = 0;
        let shifted_x = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, res, is_positive;
        let is_positive = ((x < 0) = (y < 0));
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (y > x) { return 0; }
        let q = Math.divide(x, y + y);
        if (x - (2 * y * q) < y) { 
            let res = q + q; 
        } else {
            let res = q + q + 1;
        }
        if (is_positive) { return res; }
        return -res;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j, y, approx, approx_power;
        let y = 0;
        let j = 7;
        while (~(j < 0)) {
            let approx = y + bits[j];
            let approx_power = approx * approx;
            if (~(approx_power > x) & (approx_power > 0)) {    // in case of overflow
                let y = approx;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the modulo of x and y. */
    function int mod(int x, int y) {
        var int q;
        let q = x / y;
        return x - (y * q);
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) { return a; }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) { return a; }
        return b;
    }
}
