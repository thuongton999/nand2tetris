/** Contains all the graphics for the game. */
class Graphics {
    // The screen is 512x256 pixels. Start at the top left, indexed (0, 0).
    // In RAM, each 16 column in one row is stored in a single address.
    function int getScreenCols() { return 32; }
    function int getScreenRows() { return 16; }
    function int getScreenWidth() { return 512; }
    function int getScreenHeight() { return 256; }
    // Each character is displayed within a frame which is 11 pixels high (including 1 pixel for 
    // inter-line spacing) and 8 pixels wide (including 2 pixels for inter-character spacing). The 
    // resulting grid accommodates 23 rows (indexed 0..22, top to bottom) of 64 characters each 
    // (indexed 0..63, left to right)
    function int getScreenTextCols() { return 64; }
    function int getScreenTextRows() { return 23; }

    function void printCenter(int row, String text) {
        var int center;
        let center = (Graphics.getScreenTextCols() -  text.length()) / 2;
        do Output.moveCursor(row, center);
        do Output.printString(text);
        return;
    }

    function void drawBanner(int row) {
        var String line0, line1, line2, line3, line4;
        let line0 = "    dMMMMb  .aMMMb  dMMMMb  dMP dMP dMMMMMP dMP dMP dMMMMMMMMb";
        let line1 = "   dMP VMP dMP dMP dMP.dMP dMP.dMP dMP     dMP dMP dMP dMP dMP";
        let line2 = "  dMP dMP dMMMMMP dMMMMK  dMMMMK  dMMMP   dMP dMP dMP dMP dMP ";
        let line3 = " dMP.aMP dMP dMP dMP AMF dMP AMF dMP     dMP.aMP dMP dMP dMP  ";
        let line4 = "dMMMP   dMP dMP dMP dMP dMP dMP dMMMMMP  VMMMP  dMP dMP dMP   ";
        
        do Graphics.printCenter(row, line0);
        do Graphics.printCenter(row + 1, line1);
        do Graphics.printCenter(row + 2, line2);
        do Graphics.printCenter(row + 3, line3);
        do Graphics.printCenter(row + 4, line4);
        
        do line0.dispose();
        do line1.dispose();
        do line2.dispose();
        do line3.dispose();
        do line4.dispose();
        return;
    }
    function void drawStartScreen() {
        var String author, instruction;
        var int centerY;

        let author = "By: Vu Tung Minh";
        let instruction = "Press any key to start !";
        let centerY = Graphics.getScreenTextRows() / 2;
        // draw the banner
        do Graphics.drawBanner(centerY - 4);
        // print the author
        do Graphics.printCenter(centerY + 3, author);
        // print the instruction
        do Graphics.printCenter(centerY + 4, instruction);

        do author.dispose();
        do instruction.dispose();
        return;
    }
    function void drawCongratulations() {
        var String instruction;
        var int centerY;

        let instruction = "Congratulations ! You win !";
        let centerY = Graphics.getScreenTextRows() / 2;

        // draw the banner
        do Graphics.drawBanner(centerY - 4);
        // print the instruction
        do Graphics.printCenter(centerY + 3, instruction);

        do instruction.dispose();
        return;
    }

    function void drawEndPortal(int x, int y) {
        var int width, height, location, memAddress;
        let width = 1;      // width of the flag is 1 column (16 pixels)
        let height = 16;    // height of the flag is 16 pixels
        if (x < 0) { let x = 0; }
        else {
            if ((x+width) > (Graphics.getScreenCols()-1)) {
                let x = Graphics.getScreenCols()-1;
            }
        }
        if (y < 0) { let y = 0; }
        else {
            if ((y+height) > (Graphics.getScreenHeight()-1)) {
                let y = Graphics.getScreenHeight()-1-height;
            }
        }
        let location = x + (y * Graphics.getScreenCols());
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, -113);
        do Memory.poke(memAddress+32, -1817);
        do Memory.poke(memAddress+64, -8141);
        do Memory.poke(memAddress+96, -12389);
        do Memory.poke(memAddress+128, -13111);
        do Memory.poke(memAddress+160, -26519);
        do Memory.poke(memAddress+192, -27831);
        do Memory.poke(memAddress+224, -19895);
        do Memory.poke(memAddress+256, -27047);
        do Memory.poke(memAddress+288, -29735);
        do Memory.poke(memAddress+320, -9957);
        do Memory.poke(memAddress+352, -13261);
        do Memory.poke(memAddress+384, -6169);
        do Memory.poke(memAddress+416, -4081);
        do Memory.poke(memAddress+448, -449);
        do Memory.poke(memAddress+480, -1);
        return;
    }
}