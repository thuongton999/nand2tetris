function VectorCells.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push constant 0
pop this 1
push constant 1
pop this 2
push constant 1
call Array.new 1
pop this 0
push pointer 0
return
function VectorCells.dispose 0
push argument 0
pop pointer 0
push this 0
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function VectorCells.expand 1
push argument 0
pop pointer 0
push this 1
push this 2
lt
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 2
push constant 2
call Math.multiply 2
pop this 2
push this 0
pop local 0
push this 2
push constant 1
add
call Array.new 1
pop this 0
push this 0
push local 0
push constant 0
push this 1
call VectorCells.replace 4
pop temp 0
label IF_FALSE0
push constant 0
return
function VectorCells.shrink 1
push argument 0
pop pointer 0
push this 1
push this 2
push constant 2
call Math.divide 2
gt
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 2
push constant 2
call Math.divide 2
pop this 2
push this 0
pop local 0
push this 2
push constant 1
add
call Array.new 1
pop this 0
push this 0
push local 0
push constant 0
push this 1
call VectorCells.replace 4
pop temp 0
label IF_FALSE0
push constant 0
return
function VectorCells.replace 1
push argument 2
pop local 0
label WHILE_EXP0
push local 0
push argument 3
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
push local 0
push argument 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function VectorCells.push 0
push argument 0
pop pointer 0
push this 1
push constant 1
add
pop this 1
push pointer 0
call VectorCells.expand 1
pop temp 0
push this 1
push constant 1
sub
push this 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function VectorCells.remove 2
push argument 0
pop pointer 0
push pointer 0
call VectorCells.isEmpty 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
push argument 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
pop local 1
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 1
push this 0
add
push local 1
push constant 1
add
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push this 1
push constant 1
sub
pop this 1
push pointer 0
call VectorCells.shrink 1
pop temp 0
push constant 0
return
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function VectorCells.insert 1
push argument 0
pop pointer 0
push this 1
push constant 1
add
pop this 1
push pointer 0
call VectorCells.expand 1
pop temp 0
push argument 1
pop local 0
label WHILE_EXP0
push local 0
push this 1
lt
not
if-goto WHILE_END0
push local 0
push constant 1
add
push this 0
add
push local 0
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 1
push this 0
add
push argument 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function VectorCells.get 0
push argument 0
pop pointer 0
push argument 1
push this 0
add
pop pointer 1
push that 0
return
function VectorCells.size 0
push argument 0
pop pointer 0
push this 1
return
function VectorCells.isEmpty 0
push argument 0
pop pointer 0
push this 1
push constant 0
eq
return
